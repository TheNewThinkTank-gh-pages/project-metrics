name: Update GitHub repos

on:
  workflow_dispatch:

env:
  PROJECT_METRICS_GITHUB_PAT: ${{ secrets.PROJECT_METRICS_GITHUB_PAT }}
  PROJECT_METRICS_GITHUB_ACCESS_TOKEN: ${{ secrets.PROJECT_METRICS_GITHUB_ACCESS_TOKEN }}

jobs:
  get_gh_repo_names:
    runs-on: ubuntu-latest

    outputs:
      repos: ${{ steps.repos.outputs.repositories }}

    env:
      PYTHONPATH: ${{ github.workspace }}/src

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: pip

      - name: Install and cache poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Cache poetry dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies with poetry
        run: poetry install
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: true
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Output Configuration
        id: repos
        run: |  # Make sure the delimiter used is randomly generated and unique for each run
          EOF=$(dd if=/dev/urandom bs=15 count=1 status=none | base64)
          echo "repositories<<$EOF" >> "$GITHUB_OUTPUT"
          poetry run python src/util/matrix_repos.py >> "$GITHUB_OUTPUT"
          echo "$EOF" >> "$GITHUB_OUTPUT"

      - name: echo repository
        run: echo "${{ steps.repos.outputs.repositories }}"

  update_repos:
    needs:
      - get_gh_repo_names

    runs-on: ubuntu-latest

    # env:
    #   REPOS: ${{ needs.get_gh_repo_names.outputs.repos }}

    strategy:
      matrix:
        repository: ${{ fromJson(needs.get_gh_repo_names.outputs.repos) }}

    steps:
      # - name: Matrix => (${{ matrix.repository }})
      #   run: |
      #     echo "${{ matrix.repository }}"

      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: pip

      - name: Install and cache poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Cache poetry dependencies
        id: cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install dependencies with poetry
        run: poetry install
        env:
          POETRY_VIRTUALENVS_IN_PROJECT: true
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Matrix => (${{ matrix.repository }})
        run: |
          poetry run python src/REST/add_badge.py ${{ matrix.repository }}

      # - name: add GitHub Actions workflow to Python-based repos
      #   run: |
      #     poetry run python src/add_gha_wf.py ${{ matrix.repository }}

      # - name: echo REPOS
      #   run: echo "$REPOS"
      # - name: echo repository
      #   run: echo ${{ matrix.repository }}
      # - name: Update repository
      #   run: python update_script.py ${{ matrix.repository }}
