---
name: Project Metrics Workflow

# Only set manual trigger, as the wf will otherwise recursively keep invoking itself
on:
  # push:
  #   branches:
  #     - main
  workflow_dispatch
  # schedule:
  #   - cron:  '0 0 * * *'

env:
  FG_GITHUB_ACCESS_TOKEN: ${{ secrets.FG_GITHUB_ACCESS_TOKEN }}  # fine-grained
  PROJECT_METRICS_GITHUB_ACCESS_TOKEN: ${{ secrets.PROJECT_METRICS_GITHUB_ACCESS_TOKEN }}
  PROJECT_METRICS_GITLAB_ACCESS_TOKEN: ${{ secrets.PROJECT_METRICS_GITLAB_ACCESS_TOKEN }}
  # PROJECT_METRICS_BITBUCKET_ACCESS_TOKEN: ${{ secrets.PROJECT_METRICS_BITBUCKET_ACCESS_TOKEN }}

jobs:
  Qualify-Code:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: pip

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Cache poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install Dependencies
        run: poetry install

      - name: Lint with flake8
        run: poetry run flake8 --ignore=E123,E126,E402,E501,F401 .

      - name: Lint with ruff
        run: poetry run ruff --ignore=F401,F841,E402,E501,E999 .

      - name: Cache mypy dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/mypy
          key: ${{ runner.os }}-mypy-${{ hashFiles('**/mypy.ini') }}
          restore-keys: ${{ runner.os }}-mypy-

      - name: Static type checks with mypy
        run: poetry run mypy src/ --exclude '/site-packages/'

      - name: wily build and rank
        run: |
          poetry run wily build src
          poetry run wily rank src

      # - name: Run ShellCheck
      #   uses: ludeeus/action-shellcheck@master

      - name: lint yaml
        uses: ibiqlik/action-yamllint@v3
        with:
          file_or_dir: .  # "./codecov.yml"
          config_file: .yamllint.yml

      - uses: rojopolis/spellcheck-github-actions@0.33.1
        name: Spellcheck README
        with:
          config_path: config/.spellcheck.yml
          source_files: README.md
          task_name: Markdown

      - name: Run unit tests and make coverage report
        run: poetry run pytest --cov=./ --cov-report xml:cov.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          files: ./cov.xml
          verbose: true

  Get-Metrics:
    needs:
      - Qualify-Code
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.11
          cache: pip

      - name: Install poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -

      - name: Cache poetry dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: ${{ runner.os }}-poetry-

      - name: Install Dependencies
        run: poetry install

      # - name: GitHub GraphQL largest repos
      #   run: |
      #       poetry run python src/gh_graphql_get_largest_repos.py

      # TODO: repos have tests (true/false, grouped.
      # e.g. test or tests folder exist and contains at least 1 non-empty file)

      # TODO: if repo has tests, setup codecov badge on it's README


      # TODO: repos have GH Actions wf (true/false, grouped.
      # e.g. .github/workflows/ exist and contains at least 1 non-empty yaml/yml file)

      # TODO: if repo has wf, setup CI badge on it's README

      - name: REST repos missing description
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          poetry run python src/REST/project_metrics.py

      - name: GH GraphQL most popular repos
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          poetry run python src/GraphQL/gh_get_popular_repos.py

      - name: GH GraphQL repos by lang
        env:
          PYTHONPATH: ${{ github.workspace }}/src
        run: |
          poetry run python src/GraphQL/gh_group_by_lang.py

      - name: update repos
        run: |
          poetry run python src/REST/add_repo_size_badge.py
